import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import accuracy_score
import numpy as np
import pickle
from preprocess import preprocess_data

class VulnerabilityModel(nn.Module):
    def __init__(self, input_size):
        super(VulnerabilityModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 4)  # 4 classes for low, medium, high, critical

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

def train_model():
    X, _, y, _ = preprocess_data()

    # Vectorize the text data
    vectorizer = TfidfVectorizer()
    X_tfidf = vectorizer.fit_transform(X).toarray()

    input_size = X_tfidf.shape[1]

    # Convert data to PyTorch tensors
    X_tensor = torch.tensor(X_tfidf, dtype=torch.float32)
    y_tensor = torch.tensor(y.values, dtype=torch.long)

    # Cross-Validation Setup
    k_folds = 5
    kfold = KFold(n_splits=k_folds, shuffle=True, random_state=42)
    fold_accuracies = []

    for fold, (train_idx, test_idx) in enumerate(kfold.split(X_tensor)):
        print(f'FOLD {fold+1}')
        print('--------------------------------')

        # Split data
        X_train, X_test = X_tensor[train_idx], X_tensor[test_idx]
        y_train, y_test = y_tensor[train_idx], y_tensor[test_idx]

        # Create DataLoader
        train_dataset = TensorDataset(X_train, y_train)
        train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)

        # Initialize the model, loss function, and optimizer
        model = VulnerabilityModel(input_size=input_size)
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.Adam(model.parameters(), lr=0.001)

        # Train the model
        epochs = 50
        best_accuracy = 0
        patience = 5
        trigger_times = 0

        for epoch in range(epochs):
            model.train()
            for inputs, labels in train_loader:
                optimizer.zero_grad()
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                loss.backward()
                optimizer.step()

            # Evaluate the model
            model.eval()
            with torch.no_grad():
                outputs = model(X_test)
                _, predicted = torch.max(outputs, 1)
                accuracy = (predicted == y_test).sum().item() / len(y_test)
                print(f'Epoch {epoch+1}/{epochs}, Loss: {loss.item()}, Accuracy: {accuracy}')

            # Early Stopping
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                trigger_times = 0
            else:
                trigger_times += 1

            if trigger_times >= patience:
                print('Early stopping!')
                break

        fold_accuracies.append(best_accuracy)
        print(f'Fold {fold+1} Accuracy: {best_accuracy}')
        print('--------------------------------')

    # Calculate and print the average accuracy
    avg_accuracy = np.mean(fold_accuracies)
    print(f'Average Accuracy: {avg_accuracy}')

    # Save the final model and vectorizer
    torch.save(model.state_dict(), 'vulnerability_model.pth')
    with open('tfidf_vectorizer.pkl', 'wb') as f:
        pickle.dump(vectorizer, f)
    with open('input_size.pkl', 'wb') as f:
        pickle.dump(input_size, f)

    return model

if __name__ == '__main__':
    trained_model = train_model()
