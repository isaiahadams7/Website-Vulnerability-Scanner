import pandas as pd
from sklearn.model_selection import train_test_split

def preprocess_data():
    # Load your dataset
    df = pd.read_csv('vulnerabilities.csv')  # Replace with your dataset path

    # Preprocess data
    df = df.dropna()  # Drop missing values

    # Print unique values before mapping
    print(f'Unique severity values before mapping: {df["severity"].unique()}')

    # Check for unexpected severity values
    expected_severities = {'low', 'medium', 'high', 'critical'}
    unique_severities = set(df['severity'].unique())
    unexpected_severities = unique_severities - expected_severities

    if unexpected_severities:
        raise ValueError(f"Unexpected severity values found: {unexpected_severities}")

    # Encode severity
    df['severity'] = df['severity'].map({'low': 0, 'medium': 1, 'high': 2, 'critical': 3})

    # Verify the severity mapping
    if df['severity'].isnull().any():
        raise ValueError("There are severity values that were not correctly mapped. Check the input data.")

    # Print unique values after mapping
    print(f'Unique severity values after mapping: {df["severity"].unique()}')

    # Split data into features and labels
    X = df['description']  # Use description as features
    y = df['severity']

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    return X_train, X_test, y_train, y_test
